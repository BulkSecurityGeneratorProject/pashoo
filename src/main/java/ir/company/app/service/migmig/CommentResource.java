package ir.company.app.service.migmig;


import com.codahale.metrics.annotation.Timed;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/api/v1/comments")
public class CommentResource {


    @GetMapping(value = "{eventCode}")
    @Timed
    @CrossOrigin(origins = "*")
    public ResponseEntity<List<CommentDTO>> commentList(@PathVariable("eventCode") String eventId) {
        List<CommentDTO> commentDTOS = new ArrayList<>();

        CommentDTO c = new CommentDTO();
        c.setAvatar("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");
        c.setText("in commente test 1");
        c.setId(1l);
        commentDTOS.add(c);
        CommentDTO c1 = new CommentDTO();
        c1.setAvatar("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");
        c1.setText("in commente test 2");
        c1.setId(2l);
        commentDTOS.add(c1);

        return ResponseEntity.ok(commentDTOS);

    }


    @PostMapping(value = "{eventCode}")
    @Timed
    @CrossOrigin(origins = "*")
    public ResponseEntity<HttpStatus> commentList(@PathVariable("eventCode") String eventId, @RequestParam("comment") String comment) {

        return ResponseEntity.ok(HttpStatus.OK);

    }

    @DeleteMapping(value = "{commentId}")
    @Timed
    @CrossOrigin(origins = "*")
    public ResponseEntity<HttpStatus> deleteComment(@PathVariable("commentId") Long commentId) {


        return ResponseEntity.ok(HttpStatus.OK);

    }


}
